#!/usr/bin/env python3

import json
from glob import glob
from os import environ, path
import requests
import sys
import subprocess
from ruamel.yaml import YAML
from rich.console import Console

RN = f"MICOM model databases version {meta["version"]}.\n\n{final["doi_url"]}\n"

con = Console()

meta = YAML(typ="safe", pure=True).load(open("zenodo.yml"))
headers = {"Content-Type": "application/json"}


def check_status(r):
    code = r.status_code
    if code // 100 != 2:
        raise RuntimeError("Request failed with code {}!".format(code))


if __name__ == "__main__":
    if "ZENODO_TOKEN" not in environ:
        raise ValueError("ZENODO_TOKEN env variable needs to be set!")
    token = environ["ZENODO_TOKEN"]
    {"access_token": token}

    meta["title"] = "MICOM model databases version %s" % meta["version"]

    con.log(":hammer: Creating new Zenodo deposition...")
    r = requests.post(
        "https://sandbox.zenodo.org/api/deposit/depositions",
        params=params,
        json={},
        headers=headers
    )
    check_status(r)
    deposition = r.json()
    bucket_url = deposition["links"]["bucket"]
    con.log(f"[green]Successfully created the new deposition {deposition["id"]}.")

    files = glob(f"recipes/*/databases/*_{meta["version"]}.qza")
    uploads = {}
    for fi in files:
        name, ext = path.splitext(path.basename(fi))
        zenodo_name = name + "_" + version + ext
        con.log(f":hammer: Uploading {zenodo_name}...")
        with open(path, "rb") as fp:
            r = requests.put(
                "%s/%s" % (bucket_url, zenodo_name),
                data=fp,
                params=params,
            )
        check_status(r)
        con.log("[green]Finished uploading {zenodo_name}.")
        uploads[zenodo_name] = r.json()

    con.log(":hammer: Uploading metadata...")
    r = requests.put(
        "https://zenodo.org/api/deposit/depositions/%s" % deposition["id"],
        params=params,
        data=json.dumps(meta),
        headers=headers
    )
    check_status(r)
    con.log("[green]Uploaded metadata.")

    con.log(":hammer: Publishing deposition...")
    r = requests.post(
        "https://zenodo.org/api/deposit/depositions/%s/actions/publish" % deposition["id"],
        params=params
    )
    check_status(r)
    final = r.json()
    with open(path.join("release_notes", f"{meta["version"]}.txt"), "w") as rn:
        rn.write(RN)
    con.log("[green]Published the new release to {final["doi_url"]}")
    con.log(final)
